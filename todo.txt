# TODO

- Slightly smarter CPU
    - only rest when it makes sense
    - swap less often
- Debug CPU

---------------------------------------------------------------------------------------------
LATER FEATURES

2) Allow restricting/enforcement of move selection
3) Add a OnBeforeDamage hook to the Engine, add tests for it as well, allow editing of damage on the stack, also put the damage source on the stack
4) right now, _handleSwitch runs a bunch of effects before handling control flow back. in some future edge cases this will mess things up, just don't worry about it for now. we'll need more fine grained control later on though.

KNOWN BUGGY INTERACTIONS

1) If a move forces a switch and triggers before the other player can make its move, then the new mon will try to execute its move still
- The Engine handles the case where the stamina is insufficient (it just skips the move)

Ways to mitigate:
- avoid forcing opponent swap outs unless it's at low priority
- have the engine set the skipTurn flag on newly swapped in mons (if they have yet to run their turn yet)
    - look into this later
    - or do this w/ a custom condition that can set the flag, and then remove at end of turn

2) If an effect calls dealDamage() and triggers AfterDamage, it can potentially cause an infinite loop!
(either if it calls dealDamage() on the opposing mon who also has a damaging attack with an AfterDamage trigger)

Ways to mitigate:
- deal damage directly (but skip calling dealDamage) on the Engine
- avoid dealing damage in the afterDamage hook itself
- maintain manual mutex to prevent infinite recurse

3) Ending a match before any moves are committed is valid
- Bypasses the timeout for the default validator

4) Malicious p0 can commit to a team that has an array of mons, but modify the mon moves prior to starting a battle (after p1 commits)

Ways to mitigate:
- Need to handle on the team registry angle probably
- Atm, restricting it to the same array of mon indices reduces the attack surface somewhat
- OR, just add the move indices to the integrity hash

5) No way to prevent move selection if the move is switch/no-op
Some effects / moves way wish to lock the user in. No easy way to handle this currently with the engine as-is.

Ways to mitigate
- Future iterations of the engine can do additional validation before letting SWITCH_MOVE_INDEX be considered valid on move reveal

6) Committing

---------------------------------------------------------------------------------------------